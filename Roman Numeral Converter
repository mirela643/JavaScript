function convertToRoman(num) {
  const roman={
    M:1000,
    CM:900,
    D:500,
    CD:400,
    C:100,
    XC:90,
    L:50,
    XL:40,
    X:10,
    IX:9,
    V:5,
    IV:4,
    I:1
  };
  let roman_number="";
  for(const key in roman){
    const value=roman[key];
    while(value<=num){
      num-=value;
      roman_number+=key;
    }
  }
  return roman_number;
}

convertToRoman(2); 
// should return "II".

// convertToRoman(3); 
// should return "III".

// convertToRoman(4);
// should return "IV".

// convertToRoman(5);
// should return "V".

// convertToRoman(9); 
// should return "IX".

// convertToRoman(12);
// should return "XII".

// convertToRoman(16);
// should return "XVI".

// convertToRoman(29); 
// should return "XXIX".

// convertToRoman(44); 
// should return "XLIV".

// convertToRoman(45); 
// should return "XLV"

// convertToRoman(68); 
// should return "LXVIII"

// convertToRoman(83); 
// should return "LXXXIII"

// convertToRoman(97); 
// should return "XCVII"

// convertToRoman(99); 
// should return "XCIX"

// convertToRoman(400); 
// should return "CD"

// convertToRoman(500); 
// should return "D"

// convertToRoman(501); 
// should return "DI"

// convertToRoman(649); 
// should return "DCXLIX"

// convertToRoman(798); 
// should return "DCCXCVIII"

// convertToRoman(891); 
// should return "DCCCXCI"

// convertToRoman(1000); 
// should return "M"

// convertToRoman(1004); 
// should return "MIV"

// convertToRoman(1006); 
// should return "MVI"

// convertToRoman(1023); 
// should return "MXXIII"

// convertToRoman(2014); 
// should return "MMXIV"

// convertToRoman(3999); 
// should return "MMMCMXCIX"


// freeCodeCamp javaScript algorithms and data structures challenge link is given below:

// https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter
